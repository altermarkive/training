package lc015

import (
	"reflect"
	"sort"
	"testing"
)

func check(t *testing.T, expected [][]int, result [][]int) {
	if len(expected) != len(result) {
		t.Errorf("ThreeSum - Expected %d results, got %d!", len(expected), len(result))
	}
	sort.Slice(expected, func(i, j int) bool {
		for k := 0; k < 3; k++ {
			if expected[i][k] != expected[j][k] {
				return expected[i][k] < expected[j][k]
			}
		}
		return false
	})
	sort.Slice(result, func(i, j int) bool {
		for k := 0; k < 3; k++ {
			if result[i][k] != result[j][k] {
				return result[i][k] < result[j][k]
			}
		}
		return false
	})
	if !reflect.DeepEqual(expected, result) {
		t.Errorf("ThreeSum - Expected %v, but got %v!", expected, result)
	}
}

func TestExample(t *testing.T) {
	nums := []int{-1, 0, 1, 2, -1, -4}
	expected := [][]int{{-1, -1, 2}, {-1, 0, 1}}
	result := threeSum(nums)
	check(t, expected, result)
}

func TestOversized(t *testing.T) {
	nums := []int{14, -11, -2, -3, 4, -3, -3, -8, -15, 11, 11, -6, -14, -13, 5, -10, -13, 0, -12, -8, 14, -12, -10, 2, -4, 9, 13, 10, 2, 7, -2, -7, 4, 11, 5, -7, -15, 10, -7, -14, 6, 11, -5, 7, 6, 8, 5, 8, -7, 8, -15, 14, 11, 13, 1, -15, 7, 0, 10, -14, 14, -15, -14, 3, 4, 6, 4, 4, -7, 12, 5, 14, 0, 8, 7, 13, 1, -11, -2, 9, 12, -1, 8, 0, -11, -5, 0, 11, 2, -13, 4, 1, -12, 5, -10, -1, -12, 9, -12, -11, -2, 9, -12, 5, -6, 2, 4, 10, 6, -13, 4, 3, -7, -11, 11, -3, -9, -4, -15, 8, -9, -4, -13, -14, 8, 14}
	expected := [][]int{{-15, 1, 14}, {-15, 2, 13}, {-15, 3, 12}, {-15, 4, 11}, {-15, 5, 10}, {-15, 6, 9}, {-15, 7, 8}, {-14, 0, 14}, {-14, 1, 13}, {-14, 2, 12}, {-14, 3, 11}, {-14, 4, 10}, {-14, 5, 9}, {-14, 6, 8}, {-14, 7, 7}, {-13, -1, 14}, {-13, 0, 13}, {-13, 1, 12}, {-13, 2, 11}, {-13, 3, 10}, {-13, 4, 9}, {-13, 5, 8}, {-13, 6, 7}, {-12, -2, 14}, {-12, -1, 13}, {-12, 0, 12}, {-12, 1, 11}, {-12, 2, 10}, {-12, 3, 9}, {-12, 4, 8}, {-12, 5, 7}, {-12, 6, 6}, {-11, -3, 14}, {-11, -2, 13}, {-11, -1, 12}, {-11, 0, 11}, {-11, 1, 10}, {-11, 2, 9}, {-11, 3, 8}, {-11, 4, 7}, {-11, 5, 6}, {-10, -4, 14}, {-10, -3, 13}, {-10, -2, 12}, {-10, -1, 11}, {-10, 0, 10}, {-10, 1, 9}, {-10, 2, 8}, {-10, 3, 7}, {-10, 4, 6}, {-10, 5, 5}, {-9, -5, 14}, {-9, -4, 13}, {-9, -3, 12}, {-9, -2, 11}, {-9, -1, 10}, {-9, 0, 9}, {-9, 1, 8}, {-9, 2, 7}, {-9, 3, 6}, {-9, 4, 5}, {-8, -6, 14}, {-8, -5, 13}, {-8, -4, 12}, {-8, -3, 11}, {-8, -2, 10}, {-8, -1, 9}, {-8, 0, 8}, {-8, 1, 7}, {-8, 2, 6}, {-8, 3, 5}, {-8, 4, 4}, {-7, -7, 14}, {-7, -6, 13}, {-7, -5, 12}, {-7, -4, 11}, {-7, -3, 10}, {-7, -2, 9}, {-7, -1, 8}, {-7, 0, 7}, {-7, 1, 6}, {-7, 2, 5}, {-7, 3, 4}, {-6, -6, 12}, {-6, -5, 11}, {-6, -4, 10}, {-6, -3, 9}, {-6, -2, 8}, {-6, -1, 7}, {-6, 0, 6}, {-6, 1, 5}, {-6, 2, 4}, {-6, 3, 3}, {-5, -5, 10}, {-5, -4, 9}, {-5, -3, 8}, {-5, -2, 7}, {-5, -1, 6}, {-5, 0, 5}, {-5, 1, 4}, {-5, 2, 3}, {-4, -4, 8}, {-4, -3, 7}, {-4, -2, 6}, {-4, -1, 5}, {-4, 0, 4}, {-4, 1, 3}, {-4, 2, 2}, {-3, -3, 6}, {-3, -2, 5}, {-3, -1, 4}, {-3, 0, 3}, {-3, 1, 2}, {-2, -2, 4}, {-2, -1, 3}, {-2, 0, 2}, {-2, 1, 1}, {-1, -1, 2}, {-1, 0, 1}, {0, 0, 0}}
	result := threeSum(nums)
	check(t, expected, result)
}

func TestEmpty(t *testing.T) {
	nums := []int{}
	result := threeSum(nums)
	if 0 != len(result) {
		t.Errorf("ThreeSum - Expected empty result, got %v!", result)
	}
}
