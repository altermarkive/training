// https://leetcode.com/problems/valid-sudoku/
// #medium

fn validate(board: &[Vec<char>], indices: &[(usize, usize); 9], dx: usize, dy: usize) -> bool {
    let mut check = 0;
    for index in indices {
        let (at0, at1) = *index;
        let spot = board[at1 + dy][at0 + dx];
        if spot == '.' {
            continue;
        }
        let mask = 1 << (spot as u32 - '0' as u32);
        if (check & mask) == 0 {
            check |= mask;
        } else {
            return false;
        }
    }
    true
}

const ROW: [(usize, usize); 9] = [
    (0, 0),
    (1, 0),
    (2, 0),
    (3, 0),
    (4, 0),
    (5, 0),
    (6, 0),
    (7, 0),
    (8, 0),
];
const COLUMN: [(usize, usize); 9] = [
    (0, 0),
    (0, 1),
    (0, 2),
    (0, 3),
    (0, 4),
    (0, 5),
    (0, 6),
    (0, 7),
    (0, 8),
];
const BLOCK: [(usize, usize); 9] = [
    (0, 0),
    (0, 1),
    (0, 2),
    (1, 0),
    (1, 1),
    (1, 2),
    (2, 0),
    (2, 1),
    (2, 2),
];

pub fn is_valid_sudoku(board: &[Vec<char>]) -> bool {
    for i in 0..9 {
        if !validate(board, &ROW, 0, i) {
            return false;
        }
        if !validate(board, &COLUMN, i, 0) {
            return false;
        }
        if !validate(board, &BLOCK, 3 * (i / 3), 3 * (i % 3)) {
            return false;
        }
    }
    true
}

#[cfg(test)]
mod tests {
    use super::*;

    fn example() -> Vec<Vec<char>> {
        vec![
            vec!['5', '3', '.', '.', '7', '.', '.', '.', '.'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['9', '8', '.', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9'],
        ]
    }

    #[test]
    pub fn test_example() {
        let board = example();
        assert!(is_valid_sudoku(&board));
    }

    #[test]
    pub fn test_other_example() {
        let board = vec![
            vec!['.', '8', '7', '6', '5', '4', '3', '2', '1'],
            vec!['2', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['3', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['4', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['5', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['6', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['7', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['8', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['9', '.', '.', '.', '.', '.', '.', '.', '.'],
        ];
        assert!(is_valid_sudoku(&board));
    }

    #[test]
    pub fn test_another_1() {
        let mut board = example();
        board[2][0] = '.';
        board[2][1] = '9';
        board[2][2] = '8';
        assert!(is_valid_sudoku(&board));
    }

    #[test]
    pub fn test_another_2() {
        let board = vec![
            vec!['.', '.', '4', '.', '.', '.', '6', '3', '.'],
            vec!['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['5', '.', '.', '.', '.', '.', '.', '9', '.'],
            vec!['.', '.', '.', '5', '6', '.', '.', '.', '.'],
            vec!['4', '.', '3', '.', '.', '.', '.', '.', '1'],
            vec!['.', '.', '.', '7', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '5', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ];
        assert!(!is_valid_sudoku(&board));
    }

    #[test]
    pub fn test_another_3() {
        let board = vec![
            vec!['.', '.', '.', '.', '5', '.', '.', '1', '.'],
            vec!['.', '4', '.', '3', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '3', '.', '.', '1'],
            vec!['8', '.', '.', '.', '.', '.', '.', '2', '.'],
            vec!['.', '.', '2', '.', '7', '.', '.', '.', '.'],
            vec!['.', '1', '5', '.', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '2', '.', '.', '.'],
            vec!['.', '2', '.', '9', '.', '.', '.', '.', '.'],
            vec!['.', '.', '4', '.', '.', '.', '.', '.', '.'],
        ];
        assert!(!is_valid_sudoku(&board));
    }

    #[test]
    pub fn test_another_4() {
        let board = vec![
            vec!['7', '.', '.', '.', '4', '.', '.', '.', '.'],
            vec!['.', '.', '.', '8', '6', '5', '.', '.', '.'],
            vec!['.', '1', '.', '2', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '9', '.', '.', '.'],
            vec!['.', '.', '.', '.', '5', '.', '5', '.', '.'],
            vec!['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '.', '2', '.', '.'],
            vec!['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            vec!['.', '.', '.', '.', '.', '.', '.', '.', '.'],
        ];
        assert!(!is_valid_sudoku(&board));
    }
}
